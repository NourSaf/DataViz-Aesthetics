// ../../../../../../node_modules/@amcharts/amcharts5/.internal/core/util/Type.js
function isNumber(value) {
  return typeof value === "number" && Number(value) == value;
}

// ../../../../../../node_modules/@amcharts/amcharts5/.internal/core/util/Array.js
function indexOf(array, value) {
  const length = array.length;
  for (let i = 0; i < length; ++i) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}
function any(array, test) {
  const length = array.length;
  for (let i = 0; i < length; ++i) {
    if (test(array[i])) {
      return true;
    }
  }
  return false;
}
function each(array, fn) {
  const length = array.length;
  for (let i = 0; i < length; ++i) {
    fn(array[i], i);
  }
}
function eachReverse(array, fn) {
  let i = array.length;
  while (i > 0) {
    --i;
    fn(array[i], i);
  }
}
function insertIndex(array, index, value) {
  array.splice(index, 0, value);
}
function removeIndex(array, index) {
  array.splice(index, 1);
}
function findIndex(array, matches) {
  const length = array.length;
  for (let i = 0; i < length; ++i) {
    if (matches(array[i], i)) {
      return i;
    }
  }
  return -1;
}

// ../../../../../../node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js
var DisposerClass = class {
  /**
   * Constructor.
   */
  constructor() {
    Object.defineProperty(this, "_disposed", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this._disposed = false;
  }
  /**
   * Checks if object is disposed.
   *
   * @return Disposed?
   */
  isDisposed() {
    return this._disposed;
  }
  /**
   * Disposes the object.
   */
  dispose() {
    if (!this._disposed) {
      this._disposed = true;
      this._dispose();
    }
  }
};
var Disposer = class {
  /**
   * Constructor.
   *
   * @param dispose  Function that disposes object
   */
  constructor(dispose) {
    Object.defineProperty(this, "_disposed", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_dispose", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this._disposed = false;
    this._dispose = dispose;
  }
  /**
   * Checks if object is disposed.
   *
   * @return Disposed?
   */
  isDisposed() {
    return this._disposed;
  }
  /**
   * Disposes the object.
   */
  dispose() {
    if (!this._disposed) {
      this._disposed = true;
      this._dispose();
    }
  }
};
var MultiDisposer = class extends DisposerClass {
  constructor(disposers) {
    super();
    Object.defineProperty(this, "_disposers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this._disposers = disposers;
  }
  _dispose() {
    each(this._disposers, (x) => {
      x.dispose();
    });
  }
  get disposers() {
    return this._disposers;
  }
};

export {
  isNumber,
  indexOf,
  any,
  each,
  eachReverse,
  insertIndex,
  removeIndex,
  findIndex,
  DisposerClass,
  Disposer,
  MultiDisposer
};
//# sourceMappingURL=chunk-4GV5TS2J.js.map
